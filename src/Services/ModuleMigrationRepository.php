<?php

namespace Thomasderooij\LaravelModules\Services;

use Illuminate\Database\Migrations\DatabaseMigrationRepository;

class ModuleMigrationRepository extends DatabaseMigrationRepository
{
    /**
     * Log things to the migrations table. Apply module if required
     *
     * @param string $file
     * @param int $batch
     * @param null $module
     */
    public function log ($file, $batch, $module = null) : void
    {
        if ($module === null) {
            parent::log($file, $batch);
            return;
        }

        $record = ["migration" => $file, "batch" => $batch, "module" => $module];
        $this->table()->insert($record);
    }

    /**
     * @param int $steps
     * @param string|null $module
     * @return array
     */
    public function getMigrations($steps, string $module = null)
    {
        if ($module === null) {
            return parent::getMigrations($steps); // TODO: Change the autogenerated stub
        }

        $query = $this->table()->where([
            ['batch', '>=', '1'],
            ["module", "=", $module]
        ]);

        return $query->orderBy('batch', 'desc')
            ->orderBy('migration', 'desc')
            ->take($steps)->get()->all();
    }

    /**
     * This is here from that one time I thought rolling back a specific module was a good idea.
     *
     * @param string|null $module
     * @return array
     */
    public function getLast(string $module = null)
    {
        if ($module === null) {
            return parent::getLast(); // TODO: Change the autogenerated stub
        }

        $query = $this->table()->where([
            ['batch', "=", $this->getLastBatchNumber($module)],
            ["module", "=", $module]
        ]);

        return $query->orderBy('migration', 'desc')->get()->all();
    }

    /**
     * This is here from that one time I thought rolling back a specific module was a good idea.
     *
     * @param string|null $module
     * @return int|mixed
     */
    public function getLastBatchNumber(string $module = null)
    {
        if ($module === null) {
            return parent::getLastBatchNumber();
        }

        return $this->table()->where("module", "=", $module)->max('batch');
    }
}
