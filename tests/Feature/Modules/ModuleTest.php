<?php

namespace Tests\Feature\Modules;

use Faker\Generator;
use Illuminate\Database\Migrations\MigrationCreator;
use Illuminate\Database\Migrations\Migrator;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Routing\Router;
use Illuminate\Support\Collection;
use Illuminate\Support\Composer;
use Tests\TestCase;
use Thomasderooij\LaravelModules\Contracts\Factories\ConfigFactory;
use Thomasderooij\LaravelModules\Contracts\Factories\ModuleFactory;
use Thomasderooij\LaravelModules\Contracts\Services\ComposerEditor;
use Thomasderooij\LaravelModules\Contracts\Services\ModuleManager;
use Thomasderooij\LaravelModules\Factories\ModuleMigrationFactory;

abstract class ModuleTest extends TestCase
{
    use RefreshDatabase;

    /** @var Filesystem $files */
    protected $files;

    /** @var Composer */
    protected $composer;

    /** @var ComposerEditor */
    protected $composerEditor;

    /** @var ModuleManager */
    protected $moduleManager;

    /** @var ConfigFactory */
    protected $configFactory;

    /** @var ModuleFactory */
    protected $moduleFactory;

    /** @var ModuleMigrationFactory */
    protected $migrationFactory;

    /** @var Router */
    protected $router;

    /** @var MigrationCreator */
    protected $migrationCreator;

    /** @var Migrator */
    protected $migrator;

    /** @var Generator */
    protected $faker;

    private $originalBootstrapAppFile;
    protected $root = "test_root";
    protected $module = "TestModule";

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->files = $this->app->make("files");
        $this->composer = $this->app->make("composer");
        $this->composerEditor = $this->app->make("module.service.composer_editor");
        $this->moduleManager = $this->app->make("module.service.manager");
        $this->configFactory = $this->app->make("module.factory.config");
        $this->moduleFactory = $this->app->make("module.factory.module");
        $this->migrationFactory = $this->app->make("module.factory.migration");
        $this->router = $this->app->make(Router::class);
        $this->migrationCreator = $this->app->make("migration.creator");
        $this->migrator = $this->app->make("migrator");
        $this->faker = $this->app->make(Generator::class);

        $this->undoChanges();
        $this->originalBootstrapAppFile = $this->files->get(base_path("bootstrap/app.php"));
    }

    public function tearDown(): void
    {
        $this->undoChanges();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    protected function initModules () : void
    {
        $this->configFactory->create($this->root);
        $this->migrationFactory->create();
        $this->refreshApplication();
    }

    protected function createModule (string $module = null) : void
    {
        if ($module === null) {
            $module = $this->module;
        }

        $this->moduleFactory->create($module);
        $this->moduleManager->addModule($module);
        $this->moduleManager->setWorkbench($module);
    }

    protected function createCommand (string $name = "TestCommand", string $command = "test:command", string $module = "TestModule", string $content = null) : void
    {
        if ($this->moduleManager->getWorkBench() !== strtolower($module)) {
            $mod = $this->moduleManager->getWorkBench();
            $this->moduleManager->setWorkbench($module);
        }

        $this->artisan("make:command", ["name" => "$name", "--command" => "$command"]);
        $this->refreshApplication();

        if (isset($mod)) {
            $this->moduleManager->setWorkbench($mod);
        }
    }

    protected function createRoute (string $method, string $type, string $module, string $url, string $controller, string $routeName = null) : void
    {
        $routeFile = base_path(config("modules.root"). "/" . ucfirst($module)."/routes/$type.php");
        $content = $this->getRouteNamespaceWrapper($this->moduleManager->getModuleNameSpace($module, false));
        $content = str_replace("{content}", $this->getRoute($method, $url, $controller, $routeName), $content);
        $content = $this->getRouteStub() . $content;

        $this->files->put($routeFile, $content);
    }

    protected function createMigrations (int $amount, string $module = null) : Collection
    {
        $migrations = collect([]);

        for ($i = 0; $i < $amount; $i++) {
            $migrations->push($this->createMigration($module));
        }

        return $migrations->sort();
    }

    protected function createMigration (string $module = null) : string
    {
        $string = "";
        $length = random_int(10, 15);
        for ($i = 0; $i < $length; $i++) {
            $string.= $this->faker->randomLetter;
        }

        // create the migrations dir if unavailable
        if (!is_dir($this->getMigrationBasePath($module))) {
            mkdir($this->getMigrationBasePath($module), 0777, true);
        }

        return $this->migrationCreator->create($string, $this->getMigrationBasePath($module));
    }

    protected function migrate (string $module = null) : void
    {
        $this->migrator->run($this->getMigrationBasePath($module), ["module" => $module]);
    }

    protected function rollback (string $module = null) : void
    {
        $this->migrator->rollback($this->getMigrationBasePath($module));
    }

    protected function countMigrated () : int
    {
        return \DB::table("migrations")->count();
    }

    protected function getMigrationBasePath (string $module = null) : string
    {
        $basePath = database_path("migrations");
        if ($module) {
            $basePath = base_path($this->moduleManager->getModuleDirectory($module) . "/database/migrations");
        }

        return $basePath;
    }

    private function getRouteStub () : string
    {
        return "<?php\r\n\r\n";
    }

    private function getRouteNamespaceWrapper (string $namespace) : string
    {
//        return "Route::group(function () {\r\n{content}\r\n});";
        return "{content}";
    }

    private function getRoute (string $method, string $url, string $controller, string $routeName = null) : string
    {
        $base = "Route::$method(\"$url\", \"$controller\")";
        if ($routeName) {
            $base.= "->name(\"$routeName\")";
        }

        $base.= ";";

        return $base;
    }

    private function undoChanges () : void
    {
        if ($this->moduleManager->isInitialised()) {
            $this->moduleManager->clearWorkbench();
        }
        if ($this->originalBootstrapAppFile !== null) {
            $this->files->put(base_path("bootstrap/app.php"), $this->originalBootstrapAppFile);
        }

        $root = config("modules.root") ?: $this->root;
        $resources = [
            "bootstrap/app_orig.php" => "file",
            "config/modules.php" => "file",
            "database/migrations/2019_11_01_000000_module_init_migration.php" => "file",
            "storage/$root" => "dir",
            $root => "dir",
        ];
        foreach ($resources as $resource => $type) {
            $this->deleteIfExists($resource, $type);
        }
        $this->composerEditor->removeNamespaceFromAutoload();
    }

    private function deleteIfExists (string $relative, string $type) : void
    {
        $resource = base_path($relative);
        if ($type === "file") {
            if (is_file($resource)) {
                $this->files->delete($resource);
            }
        } else {
            if (is_dir($resource)) {
                $this->files->cleanDirectory($resource);
                rmdir($resource);
            }
        }
    }
}
